{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/trantu/Assignment/assignment/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { Button, Flex, Text } from \"@react-yuki/ui\";\nimport Swiper from \"react-id-swiper\";\nimport SlideItem from \"./slideItem\";\n\nconst App = () => {\n  _s();\n\n  // Swiper instance\n  const swiperRef = useRef(null); // Slides current index\n\n  const [currentIndex, updateCurrentIndex] = useState(0); // Params definition\n\n  const params = {\n    initialSlide: 3,\n    pagination: {\n      el: \".swiper-pagination\",\n      type: \"bullets\",\n      clickable: true\n    },\n    navigation: {\n      nextEl: \".swiper-button-next\",\n      prevEl: \".swiper-button-prev\"\n    },\n    spaceBetween: 30,\n    loop: true,\n    autoplay: true\n  }; // Manipulate swiper from outside\n\n  const goNext = () => {\n    if (swiperRef.current && swiperRef.current.swiper) {\n      swiperRef.current.swiper.slideNext();\n    }\n  };\n\n  const goPrev = () => {\n    if (swiperRef.current && swiperRef.current.swiper) {\n      swiperRef.current.swiper.slidePrev();\n    }\n  };\n\n  const renderItem = useCallback(({\n    idx,\n    color,\n    content\n  }) => /*#__PURE__*/_jsxDEV(SlideItem, {\n    color: color,\n    content: content\n  }, `slide_${idx}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 7\n  }, this), []);\n  const updateIndex = useCallback(() => updateCurrentIndex(swiperRef.current.swiper.realIndex), []); // Add eventlisteners for swiper after initializing\n\n  useEffect(() => {\n    const swiperInstance = swiperRef.current.swiper;\n\n    if (swiperInstance) {\n      swiperInstance.on(\"slideChange\", updateIndex);\n    }\n\n    return () => {\n      if (swiperInstance) {\n        swiperInstance.off(\"slideChange\", updateIndex);\n      }\n    };\n  }, [updateIndex]);\n  return /*#__PURE__*/_jsxDEV(Swiper, { ...params,\n    ref: swiperRef,\n    children: items.map(renderItem)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"uNiXn58ImLObClxPZLcs0tW+7VE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/trantu/Assignment/assignment/src/App.js"],"names":["React","useState","useEffect","useCallback","useRef","Button","Flex","Text","Swiper","SlideItem","App","swiperRef","currentIndex","updateCurrentIndex","params","initialSlide","pagination","el","type","clickable","navigation","nextEl","prevEl","spaceBetween","loop","autoplay","goNext","current","swiper","slideNext","goPrev","slidePrev","renderItem","idx","color","content","updateIndex","realIndex","swiperInstance","on","off","items","map"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,EAAkDC,MAAlD,QAAgE,OAAhE;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,IAAvB,QAAmC,gBAAnC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAGA,MAAMC,GAAG,GAAG,MAAO;AAAA;;AACjB;AACA,QAAMC,SAAS,GAAGP,MAAM,CAAC,IAAD,CAAxB,CAFiB,CAIjB;;AACA,QAAM,CAACQ,YAAD,EAAeC,kBAAf,IAAqCZ,QAAQ,CAAC,CAAD,CAAnD,CALiB,CAMjB;;AACA,QAAMa,MAAM,GAAG;AACbC,IAAAA,YAAY,EAAE,CADD;AAEbC,IAAAA,UAAU,EAAE;AACVC,MAAAA,EAAE,EAAE,oBADM;AAEVC,MAAAA,IAAI,EAAE,SAFI;AAGVC,MAAAA,SAAS,EAAE;AAHD,KAFC;AAObC,IAAAA,UAAU,EAAE;AACVC,MAAAA,MAAM,EAAE,qBADE;AAEVC,MAAAA,MAAM,EAAE;AAFE,KAPC;AAWbC,IAAAA,YAAY,EAAE,EAXD;AAYbC,IAAAA,IAAI,EAAE,IAZO;AAabC,IAAAA,QAAQ,EAAE;AAbG,GAAf,CAPiB,CAuBjB;;AACA,QAAMC,MAAM,GAAG,MAAM;AACnB,QAAIf,SAAS,CAACgB,OAAV,IAAqBhB,SAAS,CAACgB,OAAV,CAAkBC,MAA3C,EAAmD;AACjDjB,MAAAA,SAAS,CAACgB,OAAV,CAAkBC,MAAlB,CAAyBC,SAAzB;AACD;AACF,GAJD;;AAMA,QAAMC,MAAM,GAAG,MAAM;AACnB,QAAInB,SAAS,CAACgB,OAAV,IAAqBhB,SAAS,CAACgB,OAAV,CAAkBC,MAA3C,EAAmD;AACjDjB,MAAAA,SAAS,CAACgB,OAAV,CAAkBC,MAAlB,CAAyBG,SAAzB;AACD;AACF,GAJD;;AAMA,QAAMC,UAAU,GAAG7B,WAAW,CAC5B,CAAC;AAAE8B,IAAAA,GAAF;AAAOC,IAAAA,KAAP;AAAcC,IAAAA;AAAd,GAAD,kBACE,QAAC,SAAD;AAAW,IAAA,KAAK,EAAED,KAAlB;AAAyB,IAAA,OAAO,EAAEC;AAAlC,KAAiD,SAAQF,GAAI,EAA7D;AAAA;AAAA;AAAA;AAAA,UAF0B,EAI5B,EAJ4B,CAA9B;AAOA,QAAMG,WAAW,GAAGjC,WAAW,CAC7B,MAAMU,kBAAkB,CAACF,SAAS,CAACgB,OAAV,CAAkBC,MAAlB,CAAyBS,SAA1B,CADK,EAE7B,EAF6B,CAA/B,CA3CiB,CAgDjB;;AACAnC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoC,cAAc,GAAG3B,SAAS,CAACgB,OAAV,CAAkBC,MAAzC;;AAEA,QAAIU,cAAJ,EAAoB;AAClBA,MAAAA,cAAc,CAACC,EAAf,CAAkB,aAAlB,EAAiCH,WAAjC;AACD;;AAED,WAAO,MAAM;AACX,UAAIE,cAAJ,EAAoB;AAClBA,QAAAA,cAAc,CAACE,GAAf,CAAmB,aAAnB,EAAkCJ,WAAlC;AACD;AACF,KAJD;AAKD,GAZQ,EAYN,CAACA,WAAD,CAZM,CAAT;AAcA,sBACM,QAAC,MAAD,OAAYtB,MAAZ;AAAoB,IAAA,GAAG,EAAEH,SAAzB;AAAA,cACG8B,KAAK,CAACC,GAAN,CAAUV,UAAV;AADH;AAAA;AAAA;AAAA;AAAA,UADN;AAMD,CArED;;GAAMtB,G;;KAAAA,G;AAsEN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { Button, Flex, Text } from \"@react-yuki/ui\";\nimport Swiper from \"react-id-swiper\";\nimport SlideItem from \"./slideItem\";\n\n\nconst App = ()  => {\n  // Swiper instance\n  const swiperRef = useRef(null);\n\n  // Slides current index\n  const [currentIndex, updateCurrentIndex] = useState(0);\n  // Params definition\n  const params = {\n    initialSlide: 3,\n    pagination: {\n      el: \".swiper-pagination\",\n      type: \"bullets\",\n      clickable: true\n    },\n    navigation: {\n      nextEl: \".swiper-button-next\",\n      prevEl: \".swiper-button-prev\"\n    },\n    spaceBetween: 30,\n    loop: true,\n    autoplay: true\n  };\n\n  // Manipulate swiper from outside\n  const goNext = () => {\n    if (swiperRef.current && swiperRef.current.swiper) {\n      swiperRef.current.swiper.slideNext();\n    }\n  };\n\n  const goPrev = () => {\n    if (swiperRef.current && swiperRef.current.swiper) {\n      swiperRef.current.swiper.slidePrev();\n    }\n  };\n\n  const renderItem = useCallback(\n    ({ idx, color, content }) => (\n      <SlideItem color={color} content={content} key={`slide_${idx}`} />\n    ),\n    []\n  );\n\n  const updateIndex = useCallback(\n    () => updateCurrentIndex(swiperRef.current.swiper.realIndex),\n    []\n  );\n\n  // Add eventlisteners for swiper after initializing\n  useEffect(() => {\n    const swiperInstance = swiperRef.current.swiper;\n\n    if (swiperInstance) {\n      swiperInstance.on(\"slideChange\", updateIndex);\n    }\n\n    return () => {\n      if (swiperInstance) {\n        swiperInstance.off(\"slideChange\", updateIndex);\n      }\n    };\n  }, [updateIndex]);\n\n  return (\n        <Swiper {...params} ref={swiperRef}>\n          {items.map(renderItem)}\n        </Swiper>\n      \n  );\n};\nexport default App"]},"metadata":{},"sourceType":"module"}